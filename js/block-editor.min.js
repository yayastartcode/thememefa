(() => {
  // node_modules/@_tw/typography/block-editor-classes.js
  var targetClasses = {
    "edit-post-visual-editor__post-title-wrapper": ["entry-header"],
    "wp-block-post-title": ["entry-title"],
    "wp-block-post-content": ["entry-content", ...tailwindTypographyClasses]
  };
  var mutationObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      const classList = mutation.target.classList;
      Object.entries(targetClasses).forEach(([targetClass, classes]) => {
        if (classList.contains(targetClass)) {
          if (!classes.every((className) => classList.contains(className))) {
            classList.add(...classes);
          }
        }
      });
    });
  });
  var editor = wp.data.select("core/editor");
  var isEmbeddedEditor = window !== window.parent;
  var unsubscribe;
  if (isEmbeddedEditor && editor && editor.getEditorMode && editor.getEditorMode() === "visual") {
    findTargetClasses();
  } else {
    let lastEditorMode = null;
    unsubscribe = wp.data.subscribe(() => {
      const editor2 = wp.data.select("core/editor");
      const currentEditorMode = editor2 && editor2.getEditorMode ? editor2.getEditorMode() : null;
      if (currentEditorMode === "visual" && currentEditorMode !== lastEditorMode) {
        findTargetClasses();
      }
      lastEditorMode = currentEditorMode;
    });
  }
  function getCurrentPostTypeClass() {
    let currentClass = null;
    for (const classToCheck of document.body.classList) {
      if (classToCheck.startsWith("post-type-")) {
        currentClass = classToCheck;
        break;
      }
    }
    return currentClass;
  }
  function findTargetClasses() {
    if (Object.keys(targetClasses).every(
      (className) => document.getElementsByClassName(className).length
    )) {
      addTypographyClasses();
    } else {
      const editorLoadedInterval = setInterval(function() {
        if (Object.keys(targetClasses).every(
          (className) => document.getElementsByClassName(className).length
        )) {
          addTypographyClasses();
          clearInterval(editorLoadedInterval);
        } else if (document.getElementsByName("editor-canvas").length) {
          clearInterval(editorLoadedInterval);
          unsubscribe();
        }
      }, 40);
    }
  }
  function addTypographyClasses() {
    const postTypeClass = getCurrentPostTypeClass();
    if (postTypeClass) {
      Object.values(targetClasses).forEach((classArray) => {
        if (!classArray.includes(postTypeClass)) {
          classArray.push(postTypeClass);
        }
      });
    }
    Object.entries(targetClasses).forEach(([targetClass, classes]) => {
      const element = document.getElementsByClassName(targetClass)[0];
      if (element) {
        element.classList.add(...classes);
      }
    });
    Object.keys(targetClasses).forEach((className) => {
      const element = document.querySelector("." + className);
      if (element) {
        mutationObserver.observe(element, {
          attributes: true,
          attributeFilter: ["class"]
        });
      }
    });
  }

  // javascript/block-editor.js
  wp.domReady(() => {
    wp.blocks.registerBlockStyle("core/paragraph", {
      name: "lead",
      label: "Lead"
    });
  });
})();
